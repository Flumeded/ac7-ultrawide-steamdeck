// ---- Created with 3Dmigoto v1.3.14 on Wed Feb 20 18:11:29 2019
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[129];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[26];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float2 v0 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy * cb1[128].xy + -cb1[126].xy;
  r0.xy = cb1[127].zw * r0.xy;
  r0.z = cmp(1 < cb1[127].y);
  r0.w = 1.77777779 * cb1[127].y;
  r0.w = cb1[127].x / r0.w;
  r0.w = r0.x * r0.w;
  r0.x = r0.z ? r0.w : r0.x;
  r0.x -= 0.1719;
  r0.z = cmp(0.5 < cb0[24].y);
  r0.w = cmp(r0.x >= cb0[19].x);
  r0.x = cmp(cb0[19].z >= r0.x);
  r0.x = r0.x ? r0.w : 0;
  r0.w = cmp(r0.y >= cb0[19].y);
  r0.x = r0.w ? r0.x : 0;
  r0.y = cmp(cb0[19].w >= r0.y);
  r0.x = r0.y ? r0.x : 0;
  r0.x = (int)r0.x | (int)r0.z;
  r1.xyzw = t0.Sample(s0_s, v0.xy).xyzw;
  r2.xyzw = t1.Sample(s1_s, v0.xy).xyzw;
  r0.y = dot(r1.xyz, float3(0.298911989,0.586610973,0.114477001));
  r0.y = saturate(1 + -r0.y);
  r0.y = r0.x ? 1 : r0.y;
  r0.yz = cb0[18].xy * r0.yy;
  r0.w = cmp(-0.00999999978 < cb0[23].x);
  r3.xy = cb0[23].xx * r0.yz;
  r0.yz = r0.ww ? r3.xy : r0.yz;
  r3.xyz = t2.Sample(s2_s, v0.xy).xyz;
  r4.xyz = r3.xyz * r0.yyy;
  r0.w = saturate(dot(r4.xyz, float3(0.298911989,0.586610973,0.114477001)));
  r2.xyz = r3.xyz * r0.yyy + r2.xyz;
  r0.y = 1 + -r2.w;
  r0.y = r0.y * r0.w + r2.w;
  r1.xyz = r1.xyz * cb0[24].xxx + cb0[23].zzz;
  r0.w = cb1[127].y / cb1[127].x;
  r3.y = v0.y * r0.w;
  r3.x = v0.x;
  r3.xy = float2(40,40) * r3.xy;
  r0.w = t4.Sample(s4_s, r3.xy).w;
  r3.xyz = t3.Sample(s3_s, v0.xy).xyz;
  r3.xyz = r3.xyz * r0.zzz;
  r0.z = dot(r3.xyz, float3(0.298911989,0.586610973,0.114477001));
  r4.xyz = r3.xyz * r0.www;
  r4.xyz = float3(3,3,3) * r4.xyz;
  r0.z = saturate(r0.z + r0.z);
  r3.xyz = r4.xyz * r0.zzz + r3.xyz;
  r4.xw = float2(2,2) * cb1[128].zw;
  r4.yz = float2(0,0);
  r5.xyzw = v0.xyxy + -r4.xyzw;
  r6.xyz = t1.Sample(s1_s, r5.xy).xyz;
  r4.xyzw = v0.xyxy + r4.xyzw;
  r7.xyz = t1.Sample(s1_s, r4.xy).xyz;
  r5.xyz = t1.Sample(s1_s, r5.zw).xyz;
  r4.xyz = t1.Sample(s1_s, r4.zw).xyz;
  if (r0.x != 0) {
    r0.x = 1 + -r0.y;
    r0.xzw = r1.xyz * r0.xxx + r2.xyz;
    r2.w = saturate(dot(r3.xyz, float3(0.298911989,0.586610973,0.114477001)));
    r2.w = 1 + -r2.w;
    r0.xzw = r0.xzw * r2.www + r3.xyz;
  } else {
    r2.w = dot(r6.xyz, float3(0.298911989,0.586610973,0.114477001));
    r3.w = dot(r7.xyz, float3(0.298911989,0.586610973,0.114477001));
    r2.w = r3.w * r2.w;
    r3.w = dot(r5.xyz, float3(0.298911989,0.586610973,0.114477001));
    r2.w = r3.w * r2.w;
    r3.w = dot(r4.xyz, float3(0.298911989,0.586610973,0.114477001));
    r2.w = r3.w * r2.w;
    r0.y = -r0.y * cb0[25].x + 1;
    r2.xyz = cb0[23].www * r2.xyz;
    r2.w = r2.w * 10 + 1;
    r2.xyz = r2.xyz * r2.www;
    r1.xyz = r1.xyz * r0.yyy + r2.xyz;
    r0.xzw = r1.xyz + r3.xyz;
  }
  o0.xyz = cb0[23].yyy * r0.xzw;
  o0.w = r1.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.14 on Wed Feb 20 18:11:29 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[26], immediateIndexed
dcl_constantbuffer cb1[129], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v0.xy
dcl_output o0.xyzw
dcl_temps 8
mad r0.xy, v0.xyxx, cb1[128].xyxx, -cb1[126].xyxx
mul r0.xy, r0.xyxx, cb1[127].zwzz
lt r0.z, l(1.000000), cb1[127].y
mul r0.w, cb1[127].y, l(1.77777779)
div r0.w, cb1[127].x, r0.w
mul r0.w, r0.w, r0.x
movc r0.x, r0.z, r0.w, r0.x
lt r0.z, l(0.500000), cb0[24].y
ge r0.w, r0.x, cb0[19].x
ge r0.x, cb0[19].z, r0.x
and r0.x, r0.x, r0.w
ge r0.w, r0.y, cb0[19].y
and r0.x, r0.w, r0.x
ge r0.y, cb0[19].w, r0.y
and r0.x, r0.y, r0.x
or r0.x, r0.x, r0.z
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v0.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v0.xyxx, t1.xyzw, s1
dp3 r0.y, r1.xyzx, l(0.298912, 0.586611, 0.114477, 0.000000)
add_sat r0.y, -r0.y, l(1.000000)
movc r0.y, r0.x, l(1.000000), r0.y
mul r0.yz, r0.yyyy, cb0[18].xxyx
lt r0.w, l(-0.010000), cb0[23].x
mul r3.xy, r0.yzyy, cb0[23].xxxx
movc r0.yz, r0.wwww, r3.xxyx, r0.yyzy
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v0.xyxx, t2.xyzw, s2
mul r4.xyz, r0.yyyy, r3.xyzx
dp3_sat r0.w, r4.xyzx, l(0.298912, 0.586611, 0.114477, 0.000000)
mad r2.xyz, r3.xyzx, r0.yyyy, r2.xyzx
add r0.y, -r2.w, l(1.000000)
mad r0.y, r0.y, r0.w, r2.w
mad r1.xyz, r1.xyzx, cb0[24].xxxx, cb0[23].zzzz
div r0.w, cb1[127].y, cb1[127].x
mul r3.y, r0.w, v0.y
mov r3.x, v0.x
mul r3.xy, r3.xyxx, l(40.000000, 40.000000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t4.xyzw, s4
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v0.xyxx, t3.xyzw, s3
mul r3.xyz, r0.zzzz, r3.xyzx
dp3 r0.z, r3.xyzx, l(0.298912, 0.586611, 0.114477, 0.000000)
mul r4.xyz, r0.wwww, r3.xyzx
mul r4.xyz, r4.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
add_sat r0.z, r0.z, r0.z
mad r3.xyz, r4.xyzx, r0.zzzz, r3.xyzx
mul r4.xw, cb1[128].zzzw, l(2.000000, 0.000000, 0.000000, 2.000000)
mov r4.yz, l(0,0,0,0)
add r5.xyzw, -r4.xyzw, v0.xyxy
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r5.xyxx, t1.xyzw, s1
add r4.xyzw, r4.xyzw, v0.xyxy
sample_indexable(texture2d)(float,float,float,float) r7.xyz, r4.xyxx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r5.zwzz, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.zwzz, t1.xyzw, s1
if_nz r0.x
  add r0.x, -r0.y, l(1.000000)
  mad r0.xzw, r1.xxyz, r0.xxxx, r2.xxyz
  dp3_sat r2.w, r3.xyzx, l(0.298912, 0.586611, 0.114477, 0.000000)
  add r2.w, -r2.w, l(1.000000)
  mad r0.xzw, r0.xxzw, r2.wwww, r3.xxyz
else
  dp3 r2.w, r6.xyzx, l(0.298912, 0.586611, 0.114477, 0.000000)
  dp3 r3.w, r7.xyzx, l(0.298912, 0.586611, 0.114477, 0.000000)
  mul r2.w, r2.w, r3.w
  dp3 r3.w, r5.xyzx, l(0.298912, 0.586611, 0.114477, 0.000000)
  mul r2.w, r2.w, r3.w
  dp3 r3.w, r4.xyzx, l(0.298912, 0.586611, 0.114477, 0.000000)
  mul r2.w, r2.w, r3.w
  mad r0.y, -r0.y, cb0[25].x, l(1.000000)
  mul r2.xyz, r2.xyzx, cb0[23].wwww
  mad r2.w, r2.w, l(10.000000), l(1.000000)
  mul r2.xyz, r2.wwww, r2.xyzx
  mad r1.xyz, r1.xyzx, r0.yyyy, r2.xyzx
  add r0.xzw, r3.xxyz, r1.xxyz
endif
mul o0.xyz, r0.xzwx, cb0[23].yyyy
mov o0.w, r1.w
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
